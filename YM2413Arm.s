;@ YM2413 sound chip emulator.
#ifdef __arm__
#include "YM2413.i"

	.global YM2413AddressW
	.global YM2413DataW
	.global YM2413StatusR

.equ NSEED,	0x000001				;@ Noise Seed
.equ WFEED,	0x400181				;@ White Noise Feedback, according to MAME.

	.syntax unified
	.arm

	.section .itcm
	.align 2
;@----------------------------------------------------------------------------
;@ r0  = mix length.
;@ r1  = mixerbuffer.
;@----------------------------------------------------------------------------
YM2413Mixer:				;@ r0=len, r1=dest, ayptr=r12=pointer to struct
	.global YM2413Mixer
;@----------------------------------------------------------------------------
	stmfd sp!,{r0,r1,r4-r11,lr}

	bl clrSamples
	ldr r4,=sinusTable
	mov r9,#0

channelLoop:
	ldmfd sp,{r0,r1}
	bl mixStart
	add r9,r9,#1
	cmp r9,#6
	bmi channelLoop
	ldrb r0,[ymptr,#ymRegs+0xE]
	tst r0,#0x10					;@ Rhythm mode
	bne ymExit
	cmp r9,#9
	bmi channelLoop

ymExit:
	ldmfd sp!,{r0,r1,r4-r11,lr}
	bx lr
;@----------------------------------------------------------------------------
mixStart:
	stmfd sp!,{r9,r12,lr}

	sub r0,r0,r9,lsl#1
	add r1,r1,r9,lsl#1
	add r6,ymptr,r9

	add r2,ymptr,r9,lsl#3			;@ Channel size = 8
	ldrd r10,[r2,#channel0]			;@ load chx,op0 & op1 phase

	ldrb r5,[r6,#ymRegs + 0x30]		;@ load chx inst/volume
	ldrb r7,[r6,#ymRegs + 0x10]		;@ load chx fnum
	ldrb r6,[r6,#ymRegs + 0x20]		;@ load chx fblock
	tst r6,#0x10					;@ Key On
	beq mixExit

	movs r3,r5,lsr#4
	ldrne r2,=instruments
	addeq r2,ymptr,#ymRegs
	ldr r8,[r2,r3,lsl#3]!
	ldr r9,[r2,#4]

	movs r6,r6,lsr#1
	orrcs r7,r7,#0x100
	and r2,r6,#0x7
	add r2,r2,#12
	mov r7,r7,lsl r2
	ldr r3,=multiTable
	and r2,r8,#0x0F
	ldrb r2,[r3,r2]
	mul r6,r2,r7
	and r2,r8,#0x0F00
	ldrb r2,[r3,r2,lsr#8]
	mul r7,r2,r7

	and r3,r8,#0x003F0000			;@ Modulator Total Level
	rsb r3,r3,#0x003F0000
	mov r3,r3,lsl#1

	and r5,r5,#0x0F
	rsb r5,r5,#0x0F
	mov r5,r5,lsl#2

;@----------------------------------------------------------------------------
mixLoop:
	add r10,r10,r6
	mov r2,r8,lsr#24
	ands r2,r2,#0x07				;@ Feedback
	addne r2,r2,#13
	add r2,r10,r12,lsl r2
	tst r2,r8,lsl#4					;@ Wave distortion
	movmi r2,#0
	mov r2,r2,lsr#22
	ldr r12,[r4,r2,lsl#2]			;@ Modulator
	add r11,r11,r7
	mla r2,r3,r12,r11
	tst r2,r8,lsl#3					;@ Wave distortion
	movmi r2,#0
	mov r2,r2,lsr#22
	ldr r2,[r4,r2,lsl#2]			;@ Carrier
	mul r2,r5,r2

	subs r0,r0,#1*9
	strhpl r2,[r1],#2*9
	bhi mixLoop
mixExit:
	ldmfd sp!,{r9,r12,lr}
	add r2,ymptr,r9,lsl#3			;@ Channel size = 8
	strd r10,[r2,#channel0]			;@ store chx,op0 & op1 phase
	bx lr
;@----------------------------------------------------------------------------
clrSamples:
	mov r2,#0
clrLoop:
	subs r0,r0,#2
	strpl r2,[r1],#4
	bhi clrLoop

	bx lr
;@----------------------------------------------------------------------------
op_calc:
	.type op_calc STT_FUNC
	.global op_calc
//MAME_INLINE signed int op_calc(UINT32 phase, unsigned int env, signed int pm, unsigned int wave_tab)
//	p = (env<<5) + sin_tab[wave_tab + ((((signed int)((phase & ~FREQ_MASK) + pm)) >> FREQ_SH ) & SIN_MASK) ];
//	if (p >= TL_TAB_LEN)
//		return 0;
//	return tl_tab[p];
;@----------------------------------------------------------------------------
	ldr r12,=sin_tab
	mov r0,r0,lsl#6
	add r0,r0,r2,lsl#6
	add r0,r3,r0,lsr#22
	ldr r0,[r12,r0,lsl#2]
	add r0,r0,r1,lsl#5
	cmp r0,#(11*2*256)
	movpl r0,#0
	ldrmi r12,=tl_tab
	ldrmi r0,[r12,r0,lsl#2]

	bx lr

;@----------------------------------------------------------------------------

	.section .text
	.align 2

;@----------------------------------------------------------------------------
YM2413Reset:				;@ r0 = chiptype, ayptr=r12=pointer to struct
	.global YM2413Reset
;@----------------------------------------------------------------------------
	stmfd sp!,{lr}

	mov r3,#0
regLoop:
	mov r0,r3
	bl YM2413AddressW
	mov r0,#0
	bl YM2413DataW
	add r3,r3,#1
	cmp r3,#0x3F
	bne regLoop

	mov r0,#NSEED
	str r0,[ymptr,#ymRng]

	ldmfd sp!,{lr}
	bx lr
;@----------------------------------------------------------------------------
YM2413StatusR:
	ldrb r0,[ymptr,#ymStatus]
	bx lr
;@----------------------------------------------------------------------------
YM2413AddressW:
	strb r0,[ymptr,#ymAddress]
	bx lr
;@----------------------------------------------------------------------------
YM2413DataW:
	ldrb r1,[ymptr,#ymAddress]
	tst r1,#0xC0
	bxne lr
	add r2,ymptr,#ymRegs
	strb r0,[r2,r1]
	bx lr
	ldr pc,[pc,r1,lsl#2]
	.long 0
ymTable:
	.long YM2413Reg0W
	.long YM2413Reg1W
	.long YM2413Reg2W
	.long YM2413Reg3W
	.long YM2413Reg4W
	.long YM2413Reg5W
	.long YM2413Reg6W
	.long YM2413Reg7W
	.long YM2413Reg8W
	.long YM2413Reg9W
	.long YM2413RegAW
	.long YM2413RegBW
	.long YM2413RegCW
	.long YM2413RegDW
	.long YM2413RegEW
	.long YM2413RegFW
;@----------------------------------------------------------------------------
instruments:
	.byte 0x49, 0x4c, 0x4c, 0x12, 0x00, 0x00, 0x00, 0x00		;@ 0 = Original

	.byte 0x61, 0x61, 0x1e, 0x17, 0xf0, 0x78, 0x00, 0x17		;@ 1 = Violin
	.byte 0x13, 0x41, 0x1e, 0x0d, 0xd7, 0xf7, 0x13, 0x13		;@ 2 = Guitar
	.byte 0x13, 0x01, 0x99, 0x04, 0xf2, 0xf4, 0x11, 0x23		;@ 3 = Piano
	.byte 0x21, 0x61, 0x1b, 0x07, 0xaf, 0x64, 0x40, 0x27		;@ 4 = Flute
	.byte 0x22, 0x21, 0x1e, 0x06, 0xf0, 0x75, 0x08, 0x18		;@ 5 = Clarinet
	.byte 0x31, 0x22, 0x16, 0x05, 0x90, 0x71, 0x00, 0x13		;@ 6 = Oboe
	.byte 0x21, 0x61, 0x1d, 0x07, 0x82, 0x80, 0x10, 0x17		;@ 7 = Trumpet
	.byte 0x23, 0x21, 0x2d, 0x16, 0xc0, 0x70, 0x07, 0x07		;@ 8 = Organ
	.byte 0x61, 0x61, 0x1b, 0x06, 0x64, 0x65, 0x10, 0x17		;@ 9 = Horn
	.byte 0x61, 0x61, 0x0c, 0x18, 0x85, 0xf0, 0x70, 0x07		;@ A = Syntesizer
	.byte 0x23, 0x01, 0x07, 0x11, 0xf0, 0xa4, 0x00, 0x22		;@ B = Harpsichord
	.byte 0x97, 0xc1, 0x24, 0x07, 0xff, 0xf8, 0x22, 0x12		;@ C = Vibraphone
	.byte 0x61, 0x10, 0x0c, 0x05, 0xf2, 0xf4, 0x40, 0x44		;@ D = Synthesizer Bass
	.byte 0x01, 0x01, 0x55, 0x03, 0xf3, 0x92, 0xf3, 0xf3		;@ E = Acoustic Bass
	.byte 0x61, 0x41, 0x89, 0x03, 0xf1, 0xf4, 0xf0, 0x13		;@ F = Electric Guitar

// drum instruments definitions
// MULTI MULTI modTL  xxx  AR/DR AR/DR SL/RR SL/RR
//   0     1     2     3     4     5     6    7
	.byte 0x01, 0x01, 0x16, 0x00, 0xfd, 0xf8, 0x2f, 0x6d // BD(multi verified, modTL verified, mod env - verified(close), carr. env verifed)
	.byte 0x01, 0x01, 0x00, 0x00, 0xd8, 0xd8, 0xf9, 0xf8 // HH(multi verified), SD(multi not used)
	.byte 0x05, 0x01, 0x00, 0x00, 0xf8, 0xba, 0x49, 0x55 // TOM(multi,env verified), TOP CYM(multi verified, env verified)
;@----------------------------------------------------------------------------
multiTable:
	.byte 1,1*2,2*2,3*2,4*2,5*2,6*2,7*2,8*2,9*2,10*2,10*2,12*2,12*2,15*2,15*2
;@----------------------------------------------------------------------------
sinusTable:
	.long 0x00000000, 0x00000003, 0x00000006, 0x00000009, 0x0000000C, 0x0000000F, 0x00000012, 0x00000015
	.long 0x00000019, 0x0000001C, 0x0000001F, 0x00000022, 0x00000025, 0x00000028, 0x0000002B, 0x0000002F
	.long 0x00000032, 0x00000035, 0x00000038, 0x0000003B, 0x0000003E, 0x00000041, 0x00000044, 0x00000048
	.long 0x0000004B, 0x0000004E, 0x00000051, 0x00000054, 0x00000057, 0x0000005A, 0x0000005D, 0x00000060
	.long 0x00000063, 0x00000066, 0x0000006A, 0x0000006D, 0x00000070, 0x00000073, 0x00000076, 0x00000079
	.long 0x0000007C, 0x0000007F, 0x00000082, 0x00000085, 0x00000088, 0x0000008B, 0x0000008E, 0x00000091
	.long 0x00000094, 0x00000097, 0x0000009A, 0x0000009D, 0x000000A0, 0x000000A3, 0x000000A6, 0x000000A9
	.long 0x000000AC, 0x000000AF, 0x000000B2, 0x000000B5, 0x000000B8, 0x000000BB, 0x000000BE, 0x000000C1
	.long 0x000000C3, 0x000000C6, 0x000000C9, 0x000000CC, 0x000000CF, 0x000000D2, 0x000000D5, 0x000000D8
	.long 0x000000DA, 0x000000DD, 0x000000E0, 0x000000E3, 0x000000E6, 0x000000E9, 0x000000EB, 0x000000EE
	.long 0x000000F1, 0x000000F4, 0x000000F6, 0x000000F9, 0x000000FC, 0x000000FF, 0x00000101, 0x00000104
	.long 0x00000107, 0x00000109, 0x0000010C, 0x0000010F, 0x00000111, 0x00000114, 0x00000117, 0x00000119
	.long 0x0000011C, 0x0000011F, 0x00000121, 0x00000124, 0x00000126, 0x00000129, 0x0000012B, 0x0000012E
	.long 0x00000130, 0x00000133, 0x00000136, 0x00000138, 0x0000013A, 0x0000013D, 0x0000013F, 0x00000142
	.long 0x00000144, 0x00000147, 0x00000149, 0x0000014C, 0x0000014E, 0x00000150, 0x00000153, 0x00000155
	.long 0x00000157, 0x0000015A, 0x0000015C, 0x0000015E, 0x00000161, 0x00000163, 0x00000165, 0x00000167
	.long 0x0000016A, 0x0000016C, 0x0000016E, 0x00000170, 0x00000172, 0x00000174, 0x00000177, 0x00000179
	.long 0x0000017B, 0x0000017D, 0x0000017F, 0x00000181, 0x00000183, 0x00000185, 0x00000187, 0x00000189
	.long 0x0000018B, 0x0000018D, 0x0000018F, 0x00000191, 0x00000193, 0x00000195, 0x00000197, 0x00000199
	.long 0x0000019B, 0x0000019D, 0x0000019E, 0x000001A0, 0x000001A2, 0x000001A4, 0x000001A6, 0x000001A7
	.long 0x000001A9, 0x000001AB, 0x000001AD, 0x000001AE, 0x000001B0, 0x000001B2, 0x000001B3, 0x000001B5
	.long 0x000001B7, 0x000001B8, 0x000001BA, 0x000001BB, 0x000001BD, 0x000001BF, 0x000001C0, 0x000001C2
	.long 0x000001C3, 0x000001C5, 0x000001C6, 0x000001C7, 0x000001C9, 0x000001CA, 0x000001CC, 0x000001CD
	.long 0x000001CE, 0x000001D0, 0x000001D1, 0x000001D2, 0x000001D4, 0x000001D5, 0x000001D6, 0x000001D7
	.long 0x000001D9, 0x000001DA, 0x000001DB, 0x000001DC, 0x000001DD, 0x000001DE, 0x000001DF, 0x000001E1
	.long 0x000001E2, 0x000001E3, 0x000001E4, 0x000001E5, 0x000001E6, 0x000001E7, 0x000001E8, 0x000001E9
	.long 0x000001E9, 0x000001EA, 0x000001EB, 0x000001EC, 0x000001ED, 0x000001EE, 0x000001EF, 0x000001EF
	.long 0x000001F0, 0x000001F1, 0x000001F2, 0x000001F2, 0x000001F3, 0x000001F4, 0x000001F4, 0x000001F5
	.long 0x000001F6, 0x000001F6, 0x000001F7, 0x000001F7, 0x000001F8, 0x000001F8, 0x000001F9, 0x000001F9
	.long 0x000001FA, 0x000001FA, 0x000001FB, 0x000001FB, 0x000001FC, 0x000001FC, 0x000001FC, 0x000001FD
	.long 0x000001FD, 0x000001FD, 0x000001FE, 0x000001FE, 0x000001FE, 0x000001FE, 0x000001FF, 0x000001FF
	.long 0x000001FF, 0x000001FF, 0x000001FF, 0x000001FF, 0x000001FF, 0x000001FF, 0x000001FF, 0x000001FF
	.long 0x00000200, 0x000001FF, 0x000001FF, 0x000001FF, 0x000001FF, 0x000001FF, 0x000001FF, 0x000001FF
	.long 0x000001FF, 0x000001FF, 0x000001FF, 0x000001FE, 0x000001FE, 0x000001FE, 0x000001FE, 0x000001FD
	.long 0x000001FD, 0x000001FD, 0x000001FC, 0x000001FC, 0x000001FC, 0x000001FB, 0x000001FB, 0x000001FA
	.long 0x000001FA, 0x000001F9, 0x000001F9, 0x000001F8, 0x000001F8, 0x000001F7, 0x000001F7, 0x000001F6
	.long 0x000001F6, 0x000001F5, 0x000001F4, 0x000001F4, 0x000001F3, 0x000001F2, 0x000001F2, 0x000001F1
	.long 0x000001F0, 0x000001EF, 0x000001EF, 0x000001EE, 0x000001ED, 0x000001EC, 0x000001EB, 0x000001EA
	.long 0x000001E9, 0x000001E9, 0x000001E8, 0x000001E7, 0x000001E6, 0x000001E5, 0x000001E4, 0x000001E3
	.long 0x000001E2, 0x000001E1, 0x000001DF, 0x000001DE, 0x000001DD, 0x000001DC, 0x000001DB, 0x000001DA
	.long 0x000001D9, 0x000001D7, 0x000001D6, 0x000001D5, 0x000001D4, 0x000001D2, 0x000001D1, 0x000001D0
	.long 0x000001CE, 0x000001CD, 0x000001CC, 0x000001CA, 0x000001C9, 0x000001C7, 0x000001C6, 0x000001C5
	.long 0x000001C3, 0x000001C2, 0x000001C0, 0x000001BF, 0x000001BD, 0x000001BB, 0x000001BA, 0x000001B8
	.long 0x000001B7, 0x000001B5, 0x000001B3, 0x000001B2, 0x000001B0, 0x000001AE, 0x000001AD, 0x000001AB
	.long 0x000001A9, 0x000001A7, 0x000001A6, 0x000001A4, 0x000001A2, 0x000001A0, 0x0000019E, 0x0000019D
	.long 0x0000019B, 0x00000199, 0x00000197, 0x00000195, 0x00000193, 0x00000191, 0x0000018F, 0x0000018D
	.long 0x0000018B, 0x00000189, 0x00000187, 0x00000185, 0x00000183, 0x00000181, 0x0000017F, 0x0000017D
	.long 0x0000017B, 0x00000179, 0x00000177, 0x00000174, 0x00000172, 0x00000170, 0x0000016E, 0x0000016C
	.long 0x0000016A, 0x00000167, 0x00000165, 0x00000163, 0x00000161, 0x0000015E, 0x0000015C, 0x0000015A
	.long 0x00000157, 0x00000155, 0x00000153, 0x00000150, 0x0000014E, 0x0000014C, 0x00000149, 0x00000147
	.long 0x00000144, 0x00000142, 0x0000013F, 0x0000013D, 0x0000013A, 0x00000138, 0x00000136, 0x00000133
	.long 0x00000130, 0x0000012E, 0x0000012B, 0x00000129, 0x00000126, 0x00000124, 0x00000121, 0x0000011F
	.long 0x0000011C, 0x00000119, 0x00000117, 0x00000114, 0x00000111, 0x0000010F, 0x0000010C, 0x00000109
	.long 0x00000107, 0x00000104, 0x00000101, 0x000000FF, 0x000000FC, 0x000000F9, 0x000000F6, 0x000000F4
	.long 0x000000F1, 0x000000EE, 0x000000EB, 0x000000E9, 0x000000E6, 0x000000E3, 0x000000E0, 0x000000DD
	.long 0x000000DA, 0x000000D8, 0x000000D5, 0x000000D2, 0x000000CF, 0x000000CC, 0x000000C9, 0x000000C6
	.long 0x000000C3, 0x000000C1, 0x000000BE, 0x000000BB, 0x000000B8, 0x000000B5, 0x000000B2, 0x000000AF
	.long 0x000000AC, 0x000000A9, 0x000000A6, 0x000000A3, 0x000000A0, 0x0000009D, 0x0000009A, 0x00000097
	.long 0x00000094, 0x00000091, 0x0000008E, 0x0000008B, 0x00000088, 0x00000085, 0x00000082, 0x0000007F
	.long 0x0000007C, 0x00000079, 0x00000076, 0x00000073, 0x00000070, 0x0000006D, 0x0000006A, 0x00000066
	.long 0x00000063, 0x00000060, 0x0000005D, 0x0000005A, 0x00000057, 0x00000054, 0x00000051, 0x0000004E
	.long 0x0000004B, 0x00000048, 0x00000044, 0x00000041, 0x0000003E, 0x0000003B, 0x00000038, 0x00000035
	.long 0x00000032, 0x0000002F, 0x0000002B, 0x00000028, 0x00000025, 0x00000022, 0x0000001F, 0x0000001C
	.long 0x00000019, 0x00000015, 0x00000012, 0x0000000F, 0x0000000C, 0x00000009, 0x00000006, 0x00000003
	.long 0x00000000, 0xFFFFFFFD, 0xFFFFFFFA, 0xFFFFFFF7, 0xFFFFFFF4, 0xFFFFFFF1, 0xFFFFFFEE, 0xFFFFFFEB
	.long 0xFFFFFFE7, 0xFFFFFFE4, 0xFFFFFFE1, 0xFFFFFFDE, 0xFFFFFFDB, 0xFFFFFFD8, 0xFFFFFFD5, 0xFFFFFFD1
	.long 0xFFFFFFCE, 0xFFFFFFCB, 0xFFFFFFC8, 0xFFFFFFC5, 0xFFFFFFC2, 0xFFFFFFBF, 0xFFFFFFBC, 0xFFFFFFB8
	.long 0xFFFFFFB5, 0xFFFFFFB2, 0xFFFFFFAF, 0xFFFFFFAC, 0xFFFFFFA9, 0xFFFFFFA6, 0xFFFFFFA3, 0xFFFFFFA0
	.long 0xFFFFFF9D, 0xFFFFFF9A, 0xFFFFFF96, 0xFFFFFF93, 0xFFFFFF90, 0xFFFFFF8D, 0xFFFFFF8A, 0xFFFFFF87
	.long 0xFFFFFF84, 0xFFFFFF81, 0xFFFFFF7E, 0xFFFFFF7B, 0xFFFFFF78, 0xFFFFFF75, 0xFFFFFF72, 0xFFFFFF6F
	.long 0xFFFFFF6C, 0xFFFFFF69, 0xFFFFFF66, 0xFFFFFF63, 0xFFFFFF60, 0xFFFFFF5D, 0xFFFFFF5A, 0xFFFFFF57
	.long 0xFFFFFF54, 0xFFFFFF51, 0xFFFFFF4E, 0xFFFFFF4B, 0xFFFFFF48, 0xFFFFFF45, 0xFFFFFF42, 0xFFFFFF3F
	.long 0xFFFFFF3D, 0xFFFFFF3A, 0xFFFFFF37, 0xFFFFFF34, 0xFFFFFF31, 0xFFFFFF2E, 0xFFFFFF2B, 0xFFFFFF28
	.long 0xFFFFFF26, 0xFFFFFF23, 0xFFFFFF20, 0xFFFFFF1D, 0xFFFFFF1A, 0xFFFFFF17, 0xFFFFFF15, 0xFFFFFF12
	.long 0xFFFFFF0F, 0xFFFFFF0C, 0xFFFFFF0A, 0xFFFFFF07, 0xFFFFFF04, 0xFFFFFF01, 0xFFFFFEFF, 0xFFFFFEFC
	.long 0xFFFFFEF9, 0xFFFFFEF7, 0xFFFFFEF4, 0xFFFFFEF1, 0xFFFFFEEF, 0xFFFFFEEC, 0xFFFFFEE9, 0xFFFFFEE7
	.long 0xFFFFFEE4, 0xFFFFFEE1, 0xFFFFFEDF, 0xFFFFFEDC, 0xFFFFFEDA, 0xFFFFFED7, 0xFFFFFED5, 0xFFFFFED2
	.long 0xFFFFFED0, 0xFFFFFECD, 0xFFFFFECA, 0xFFFFFEC8, 0xFFFFFEC6, 0xFFFFFEC3, 0xFFFFFEC1, 0xFFFFFEBE
	.long 0xFFFFFEBC, 0xFFFFFEB9, 0xFFFFFEB7, 0xFFFFFEB4, 0xFFFFFEB2, 0xFFFFFEB0, 0xFFFFFEAD, 0xFFFFFEAB
	.long 0xFFFFFEA9, 0xFFFFFEA6, 0xFFFFFEA4, 0xFFFFFEA2, 0xFFFFFE9F, 0xFFFFFE9D, 0xFFFFFE9B, 0xFFFFFE99
	.long 0xFFFFFE96, 0xFFFFFE94, 0xFFFFFE92, 0xFFFFFE90, 0xFFFFFE8E, 0xFFFFFE8C, 0xFFFFFE89, 0xFFFFFE87
	.long 0xFFFFFE85, 0xFFFFFE83, 0xFFFFFE81, 0xFFFFFE7F, 0xFFFFFE7D, 0xFFFFFE7B, 0xFFFFFE79, 0xFFFFFE77
	.long 0xFFFFFE75, 0xFFFFFE73, 0xFFFFFE71, 0xFFFFFE6F, 0xFFFFFE6D, 0xFFFFFE6B, 0xFFFFFE69, 0xFFFFFE67
	.long 0xFFFFFE65, 0xFFFFFE63, 0xFFFFFE62, 0xFFFFFE60, 0xFFFFFE5E, 0xFFFFFE5C, 0xFFFFFE5A, 0xFFFFFE59
	.long 0xFFFFFE57, 0xFFFFFE55, 0xFFFFFE53, 0xFFFFFE52, 0xFFFFFE50, 0xFFFFFE4E, 0xFFFFFE4D, 0xFFFFFE4B
	.long 0xFFFFFE49, 0xFFFFFE48, 0xFFFFFE46, 0xFFFFFE45, 0xFFFFFE43, 0xFFFFFE41, 0xFFFFFE40, 0xFFFFFE3E
	.long 0xFFFFFE3D, 0xFFFFFE3B, 0xFFFFFE3A, 0xFFFFFE39, 0xFFFFFE37, 0xFFFFFE36, 0xFFFFFE34, 0xFFFFFE33
	.long 0xFFFFFE32, 0xFFFFFE30, 0xFFFFFE2F, 0xFFFFFE2E, 0xFFFFFE2C, 0xFFFFFE2B, 0xFFFFFE2A, 0xFFFFFE29
	.long 0xFFFFFE27, 0xFFFFFE26, 0xFFFFFE25, 0xFFFFFE24, 0xFFFFFE23, 0xFFFFFE22, 0xFFFFFE21, 0xFFFFFE1F
	.long 0xFFFFFE1E, 0xFFFFFE1D, 0xFFFFFE1C, 0xFFFFFE1B, 0xFFFFFE1A, 0xFFFFFE19, 0xFFFFFE18, 0xFFFFFE17
	.long 0xFFFFFE17, 0xFFFFFE16, 0xFFFFFE15, 0xFFFFFE14, 0xFFFFFE13, 0xFFFFFE12, 0xFFFFFE11, 0xFFFFFE11
	.long 0xFFFFFE10, 0xFFFFFE0F, 0xFFFFFE0E, 0xFFFFFE0E, 0xFFFFFE0D, 0xFFFFFE0C, 0xFFFFFE0C, 0xFFFFFE0B
	.long 0xFFFFFE0A, 0xFFFFFE0A, 0xFFFFFE09, 0xFFFFFE09, 0xFFFFFE08, 0xFFFFFE08, 0xFFFFFE07, 0xFFFFFE07
	.long 0xFFFFFE06, 0xFFFFFE06, 0xFFFFFE05, 0xFFFFFE05, 0xFFFFFE04, 0xFFFFFE04, 0xFFFFFE04, 0xFFFFFE03
	.long 0xFFFFFE03, 0xFFFFFE03, 0xFFFFFE02, 0xFFFFFE02, 0xFFFFFE02, 0xFFFFFE02, 0xFFFFFE01, 0xFFFFFE01
	.long 0xFFFFFE01, 0xFFFFFE01, 0xFFFFFE01, 0xFFFFFE01, 0xFFFFFE01, 0xFFFFFE01, 0xFFFFFE01, 0xFFFFFE01
	.long 0xFFFFFE00, 0xFFFFFE01, 0xFFFFFE01, 0xFFFFFE01, 0xFFFFFE01, 0xFFFFFE01, 0xFFFFFE01, 0xFFFFFE01
	.long 0xFFFFFE01, 0xFFFFFE01, 0xFFFFFE01, 0xFFFFFE02, 0xFFFFFE02, 0xFFFFFE02, 0xFFFFFE02, 0xFFFFFE03
	.long 0xFFFFFE03, 0xFFFFFE03, 0xFFFFFE04, 0xFFFFFE04, 0xFFFFFE04, 0xFFFFFE05, 0xFFFFFE05, 0xFFFFFE06
	.long 0xFFFFFE06, 0xFFFFFE07, 0xFFFFFE07, 0xFFFFFE08, 0xFFFFFE08, 0xFFFFFE09, 0xFFFFFE09, 0xFFFFFE0A
	.long 0xFFFFFE0A, 0xFFFFFE0B, 0xFFFFFE0C, 0xFFFFFE0C, 0xFFFFFE0D, 0xFFFFFE0E, 0xFFFFFE0E, 0xFFFFFE0F
	.long 0xFFFFFE10, 0xFFFFFE11, 0xFFFFFE11, 0xFFFFFE12, 0xFFFFFE13, 0xFFFFFE14, 0xFFFFFE15, 0xFFFFFE16
	.long 0xFFFFFE17, 0xFFFFFE17, 0xFFFFFE18, 0xFFFFFE19, 0xFFFFFE1A, 0xFFFFFE1B, 0xFFFFFE1C, 0xFFFFFE1D
	.long 0xFFFFFE1E, 0xFFFFFE1F, 0xFFFFFE21, 0xFFFFFE22, 0xFFFFFE23, 0xFFFFFE24, 0xFFFFFE25, 0xFFFFFE26
	.long 0xFFFFFE27, 0xFFFFFE29, 0xFFFFFE2A, 0xFFFFFE2B, 0xFFFFFE2C, 0xFFFFFE2E, 0xFFFFFE2F, 0xFFFFFE30
	.long 0xFFFFFE32, 0xFFFFFE33, 0xFFFFFE34, 0xFFFFFE36, 0xFFFFFE37, 0xFFFFFE39, 0xFFFFFE3A, 0xFFFFFE3B
	.long 0xFFFFFE3D, 0xFFFFFE3E, 0xFFFFFE40, 0xFFFFFE41, 0xFFFFFE43, 0xFFFFFE45, 0xFFFFFE46, 0xFFFFFE48
	.long 0xFFFFFE49, 0xFFFFFE4B, 0xFFFFFE4D, 0xFFFFFE4E, 0xFFFFFE50, 0xFFFFFE52, 0xFFFFFE53, 0xFFFFFE55
	.long 0xFFFFFE57, 0xFFFFFE59, 0xFFFFFE5A, 0xFFFFFE5C, 0xFFFFFE5E, 0xFFFFFE60, 0xFFFFFE62, 0xFFFFFE63
	.long 0xFFFFFE65, 0xFFFFFE67, 0xFFFFFE69, 0xFFFFFE6B, 0xFFFFFE6D, 0xFFFFFE6F, 0xFFFFFE71, 0xFFFFFE73
	.long 0xFFFFFE75, 0xFFFFFE77, 0xFFFFFE79, 0xFFFFFE7B, 0xFFFFFE7D, 0xFFFFFE7F, 0xFFFFFE81, 0xFFFFFE83
	.long 0xFFFFFE85, 0xFFFFFE87, 0xFFFFFE89, 0xFFFFFE8C, 0xFFFFFE8E, 0xFFFFFE90, 0xFFFFFE92, 0xFFFFFE94
	.long 0xFFFFFE96, 0xFFFFFE99, 0xFFFFFE9B, 0xFFFFFE9D, 0xFFFFFE9F, 0xFFFFFEA2, 0xFFFFFEA4, 0xFFFFFEA6
	.long 0xFFFFFEA9, 0xFFFFFEAB, 0xFFFFFEAD, 0xFFFFFEB0, 0xFFFFFEB2, 0xFFFFFEB4, 0xFFFFFEB7, 0xFFFFFEB9
	.long 0xFFFFFEBC, 0xFFFFFEBE, 0xFFFFFEC1, 0xFFFFFEC3, 0xFFFFFEC6, 0xFFFFFEC8, 0xFFFFFECA, 0xFFFFFECD
	.long 0xFFFFFED0, 0xFFFFFED2, 0xFFFFFED5, 0xFFFFFED7, 0xFFFFFEDA, 0xFFFFFEDC, 0xFFFFFEDF, 0xFFFFFEE1
	.long 0xFFFFFEE4, 0xFFFFFEE7, 0xFFFFFEE9, 0xFFFFFEEC, 0xFFFFFEEF, 0xFFFFFEF1, 0xFFFFFEF4, 0xFFFFFEF7
	.long 0xFFFFFEF9, 0xFFFFFEFC, 0xFFFFFEFF, 0xFFFFFF01, 0xFFFFFF04, 0xFFFFFF07, 0xFFFFFF0A, 0xFFFFFF0C
	.long 0xFFFFFF0F, 0xFFFFFF12, 0xFFFFFF15, 0xFFFFFF17, 0xFFFFFF1A, 0xFFFFFF1D, 0xFFFFFF20, 0xFFFFFF23
	.long 0xFFFFFF26, 0xFFFFFF28, 0xFFFFFF2B, 0xFFFFFF2E, 0xFFFFFF31, 0xFFFFFF34, 0xFFFFFF37, 0xFFFFFF3A
	.long 0xFFFFFF3D, 0xFFFFFF3F, 0xFFFFFF42, 0xFFFFFF45, 0xFFFFFF48, 0xFFFFFF4B, 0xFFFFFF4E, 0xFFFFFF51
	.long 0xFFFFFF54, 0xFFFFFF57, 0xFFFFFF5A, 0xFFFFFF5D, 0xFFFFFF60, 0xFFFFFF63, 0xFFFFFF66, 0xFFFFFF69
	.long 0xFFFFFF6C, 0xFFFFFF6F, 0xFFFFFF72, 0xFFFFFF75, 0xFFFFFF78, 0xFFFFFF7B, 0xFFFFFF7E, 0xFFFFFF81
	.long 0xFFFFFF84, 0xFFFFFF87, 0xFFFFFF8A, 0xFFFFFF8D, 0xFFFFFF90, 0xFFFFFF93, 0xFFFFFF96, 0xFFFFFF9A
	.long 0xFFFFFF9D, 0xFFFFFFA0, 0xFFFFFFA3, 0xFFFFFFA6, 0xFFFFFFA9, 0xFFFFFFAC, 0xFFFFFFAF, 0xFFFFFFB2
	.long 0xFFFFFFB5, 0xFFFFFFB8, 0xFFFFFFBC, 0xFFFFFFBF, 0xFFFFFFC2, 0xFFFFFFC5, 0xFFFFFFC8, 0xFFFFFFCB
	.long 0xFFFFFFCE, 0xFFFFFFD1, 0xFFFFFFD5, 0xFFFFFFD8, 0xFFFFFFDB, 0xFFFFFFDE, 0xFFFFFFE1, 0xFFFFFFE4
	.long 0xFFFFFFE7, 0xFFFFFFEB, 0xFFFFFFEE, 0xFFFFFFF1, 0xFFFFFFF4, 0xFFFFFFF7, 0xFFFFFFFA, 0xFFFFFFFD

attenuationCode:
	addmi r10,r10,#0x0000
	addmi r10,r10,#0x00AA
	addmi r10,r10,#0x00F1
	addmi r10,r10,#0x0154
	addmi r10,r10,#0x01E0
	addmi r10,r10,#0x02AC
	addmi r10,r10,#0x03C4
	addmi r10,r10,#0x0550
	addmi r10,r10,#0x0790
	addmi r10,r10,#0x0AB0
	addmi r10,r10,#0x0F10
	addmi r10,r10,#0x1540
	addmi r10,r10,#0x1E00
	addmi r10,r10,#0x2AC0
	addmi r10,r10,#0x3C40
	addmi r10,r10,#0x5500
attenuationCode0x10:
	addmi r10,r10,lr

;@----------------------------------------------------------------------------
YM2413Reg1W:
YM2413Reg3W:
YM2413Reg5W:
	bic r1,r1,#1
;@----------------------------------------------------------------------------
YM2413Reg0W:
YM2413Reg2W:
YM2413Reg4W:
	ldrh r0,[r2,r1]
	cmp r0,#0
	moveq r0,#1
	sub r0,r0,r0,lsl#20
	add r2,ymptr,r1,lsl#1
	str r0,[r2,#ymCh0Freq]
	bx lr
;@----------------------------------------------------------------------------
YM2413Reg6W:
	cmp r0,#0
	moveq r0,#1
	sub r0,r0,r0,lsl#20
	str r0,[ymptr,#ymCh3Freq]
	bx lr
;@----------------------------------------------------------------------------
YM2413Reg7W:
	strb r0,[ymptr,#ymChDisable]
	bx lr
;@----------------------------------------------------------------------------
YM2413Reg8W:
YM2413Reg9W:
YM2413RegAW:
	ands r2,r0,#0x10
	andeq r2,r0,#0xF
	adr r0,attenuationCode
	ldr r0,[r0,r2,lsl#2]
//	ldr r2,=chAVol-8*8
	str r0,[r2,r1,lsl#3]
	bx lr
;@----------------------------------------------------------------------------
YM2413RegBW:
YM2413RegCW:
	ldrb r0,[ymptr,#ymRegs+0xB]
	ldrb r1,[ymptr,#ymRegs+0xC]
	orr r0,r0,r1,lsl#8
	sub r0,r0,r0,lsl#16
	str r0,[ymptr,#ymEnvFreq]
	bx lr
;@----------------------------------------------------------------------------
YM2413RegDW:
	cmp r0,#4
	movmi r0,#9
	cmp r0,#8
	movmi r0,#0xF
	tst r0,#1					;@ ALT ^= Hold
	eorne r0,r0,#2
	strh r0,[ymptr,#ymEnvType]	;@ Also clear Envelope addr
	bx lr
;@----------------------------------------------------------------------------
YM2413RegEW:
	strb r0,[ymptr,#ymPortAOut]
	ldrb r1,[ymptr,#ymChDisable]
	tst r1,#0x40
	ldrne r1,[ymptr,#ymPortAOutFptr]
	cmpne r1,#0
	bxeq lr
	bx r1
;@----------------------------------------------------------------------------
YM2413RegFW:
	strb r0,[ymptr,#ymPortBOut]
	ldrb r1,[ymptr,#ymChDisable]
	tst r1,#0x80
	ldrne r1,[ymptr,#ymPortBOutFptr]
	cmpne r1,#0
	bxeq lr
	bx r1
;@----------------------------------------------------------------------------
YM2413RegER:
	ldrb r1,[ymptr,#ymChDisable]
	ands r1,r1,#0x40
	ldrbne r0,[ymptr,#ymPortAOut]
	bxne lr
	ldr r1,[ymptr,#ymPortAInFptr]
	cmp r1,#0
	ldrbeq r0,[ymptr,#ymPortAIn]
	bxeq lr
	bx r1
;@----------------------------------------------------------------------------
YM2413RegFR:
	ldrb r1,[ymptr,#ymChDisable]
	ands r1,r1,#0x80
	ldrbne r0,[ymptr,#ymPortBOut]
	bxne lr
	ldr r1,[ymptr,#ymPortBInFptr]
	cmp r1,#0
	ldrbeq r0,[ymptr,#ymPortBIn]
	bxeq lr
	bx r1
;@----------------------------------------------------------------------------
	.end
#endif // #ifdef __arm__
